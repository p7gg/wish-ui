/*!
 * Portions of this file are based on code from react-spectrum.
 * Apache License Version 2.0, Copyright 2020 Adobe.
 *
 * Credits to the React Spectrum team:
 * https://github.com/adobe/react-spectrum/blob/3155e4db7eba07cf06525747ce0adb54c1e2a086/packages/@react-aria/switch/src/useSwitch.ts
 */
import { composeEventHandlers, mergeDefaultProps, mergeRefs, } from "@kobalte/utils";
import { createMemo, createSignal, createUniqueId, splitProps, } from "solid-js";
import { createFormResetListener, createHover, createPress, createToggleState, HOVER_HANDLERS_PROP_NAMES, PRESS_HANDLERS_PROP_NAMES, } from "../primitives";
import { SwitchContext } from "./switch-context";
/**
 * A control that allows users to choose one of two values: on or off.
 */
export const SwitchRoot = props => {
    let ref;
    const defaultId = `switch-${createUniqueId()}`;
    props = mergeDefaultProps({
        value: "on",
        id: defaultId,
    }, props);
    const [local, others] = splitProps(props, [
        "ref",
        "value",
        "isChecked",
        "defaultIsChecked",
        "onCheckedChange",
        "name",
        "value",
        "validationState",
        "isRequired",
        "isDisabled",
        "isReadOnly",
        ...PRESS_HANDLERS_PROP_NAMES,
        ...HOVER_HANDLERS_PROP_NAMES,
    ]);
    const [isFocused, setIsFocused] = createSignal(false);
    const [isFocusVisible, setIsFocusVisible] = createSignal(false);
    const state = createToggleState({
        isSelected: () => local.isChecked,
        defaultIsSelected: () => local.defaultIsChecked,
        onSelectedChange: selected => local.onCheckedChange?.(selected),
        isDisabled: () => local.isDisabled,
        isReadOnly: () => local.isReadOnly,
    });
    createFormResetListener(() => ref, () => state.setIsSelected(local.defaultIsChecked ?? false));
    const { isPressed, pressHandlers } = createPress({
        isDisabled: () => local.isDisabled,
        preventFocusOnPress: () => isFocused(), // For consistency with native, prevent the input blurs.
    });
    const { isHovered, hoverHandlers } = createHover({
        isDisabled: () => local.isDisabled,
    });
    const dataset = createMemo(() => ({
        "data-valid": local.validationState === "valid" ? "" : undefined,
        "data-invalid": local.validationState === "invalid" ? "" : undefined,
        "data-checked": state.isSelected() ? "" : undefined,
        "data-required": local.isRequired ? "" : undefined,
        "data-disabled": local.isDisabled ? "" : undefined,
        "data-readonly": local.isReadOnly ? "" : undefined,
        "data-hover": isHovered() ? "" : undefined,
        "data-focus": isFocused() ? "" : undefined,
        "data-focus-visible": isFocusVisible() ? "" : undefined,
        "data-active": isPressed() ? "" : undefined,
    }));
    const context = {
        name: () => local.name ?? others.id,
        value: () => local.value,
        dataset,
        validationState: () => local.validationState,
        isChecked: () => state.isSelected(),
        isRequired: () => local.isRequired,
        isDisabled: () => local.isDisabled,
        isReadOnly: () => local.isReadOnly,
        generateId: part => `${others.id}-${part}`,
        setIsChecked: isChecked => state.setIsSelected(isChecked),
        setIsFocused,
        setIsFocusVisible,
    };
    return (<SwitchContext.Provider value={context}>
      <label ref={mergeRefs(el => (ref = el), local.ref)} onKeyDown={composeEventHandlers([local.onKeyDown, pressHandlers.onKeyDown])} onKeyUp={composeEventHandlers([local.onKeyUp, pressHandlers.onKeyUp])} onClick={composeEventHandlers([local.onClick, pressHandlers.onClick])} onPointerDown={composeEventHandlers([local.onPointerDown, pressHandlers.onPointerDown])} onPointerUp={composeEventHandlers([local.onPointerUp, pressHandlers.onPointerUp])} onMouseDown={composeEventHandlers([local.onMouseDown, pressHandlers.onMouseDown])} onDragStart={composeEventHandlers([local.onDragStart, pressHandlers.onDragStart])} onPointerEnter={composeEventHandlers([local.onPointerEnter, hoverHandlers.onPointerEnter])} onPointerLeave={composeEventHandlers([local.onPointerLeave, hoverHandlers.onPointerLeave])} {...context.dataset()} {...others}/>
    </SwitchContext.Provider>);
};
