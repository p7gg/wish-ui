'use strict';

var solidJs = require('solid-js');
var utils = require('@solid-primitives/utils');

// src/propTraps.ts
function trueFn() {
  return true;
}
exports.propTraps = {
  get(_, property, receiver) {
    if (property === solidJs.$PROXY)
      return receiver;
    return _.get(property);
  },
  has(_, property) {
    return _.has(property);
  },
  set: trueFn,
  deleteProperty: trueFn,
  getOwnPropertyDescriptor(_, property) {
    return {
      configurable: true,
      enumerable: true,
      get() {
        return _.get(property);
      },
      set: trueFn,
      deleteProperty: trueFn
    };
  },
  ownKeys(_) {
    return _.keys();
  }
};
function filterProps(props, predicate) {
  return new Proxy(
    {
      get(property) {
        return property in props && predicate(property) ? props[property] : void 0;
      },
      has(property) {
        return property in props && predicate(property);
      },
      keys() {
        return Object.keys(props).filter(predicate);
      }
    },
    exports.propTraps
  );
}
function createPropsPredicate(props, predicate) {
  const cache = solidJs.createMemo(
    () => {
      return {};
    },
    void 0,
    { equals: false }
  );
  return (key) => {
    const cacheRef = cache();
    const cached = cacheRef[key];
    if (cached !== void 0)
      return cached;
    const v = predicate(key);
    cacheRef[key] = v;
    return v;
  };
}
var extractCSSregex = /([^:; ]*):\s*([^;]*)/g;
var isEventListenerKey = (key) => key[0] === "o" && key[1] === "n" && key.length > 2 && key[2] !== ":" && !key.startsWith("oncapture:");
function stringStyleToObject(style) {
  const object = {};
  let match;
  while (match = extractCSSregex.exec(style)) {
    object[match[1]] = match[2];
  }
  return object;
}
function combineStyle(a, b) {
  if (typeof a === "object" && typeof b === "object")
    return { ...a, ...b };
  if (typeof a === "string" && typeof b === "string")
    return `${a};${b}`;
  const objA = typeof a === "object" ? a : stringStyleToObject(a);
  const objB = typeof b === "object" ? b : stringStyleToObject(b);
  return { ...objA, ...objB };
}
function combineProps(...sources) {
  if (sources.length === 1)
    return sources[0];
  const merge = solidJs.mergeProps(...sources);
  const reduce = (key, calc) => {
    let v = void 0;
    for (const props of sources) {
      const propV = props[key];
      if (!v)
        v = propV;
      else if (propV)
        v = calc(v, propV);
    }
    return v;
  };
  const listeners = {};
  for (const props of sources) {
    for (const key in props) {
      if (!isEventListenerKey(key))
        continue;
      const v = props[key];
      const name = key.toLowerCase();
      let callback;
      if (typeof v === "function")
        callback = v;
      else if (Array.isArray(v)) {
        if (v.length === 1)
          callback = v[0];
        else
          callback = v[0].bind(void 0, v[1]);
      } else {
        delete listeners[name];
        continue;
      }
      const callbacks = listeners[name];
      if (!callbacks)
        listeners[name] = [callback];
      else
        callbacks.push(callback);
    }
  }
  return new Proxy(
    {
      get(key) {
        if (typeof key !== "string")
          return Reflect.get(merge, key);
        if (key === "style")
          return reduce("style", combineStyle);
        if (key === "ref") {
          const callbacks = [];
          for (const props of sources) {
            const cb = props[key];
            if (typeof cb === "function")
              callbacks.push(cb);
          }
          return utils.chain(callbacks);
        }
        if (isEventListenerKey(key)) {
          const callbacks = listeners[key.toLowerCase()];
          return Array.isArray(callbacks) ? utils.chain(callbacks) : Reflect.get(merge, key);
        }
        if (key === "class" || key === "className")
          return reduce(key, (a, b) => `${a} ${b}`);
        if (key === "classList")
          return reduce(key, (a, b) => ({ ...a, ...b }));
        return Reflect.get(merge, key);
      },
      has(key) {
        return Reflect.has(merge, key);
      },
      keys() {
        return Object.keys(merge);
      }
    },
    exports.propTraps
  );
}

exports.combineProps = combineProps;
exports.combineStyle = combineStyle;
exports.createPropsPredicate = createPropsPredicate;
exports.filterProps = filterProps;
exports.stringStyleToObject = stringStyleToObject;
