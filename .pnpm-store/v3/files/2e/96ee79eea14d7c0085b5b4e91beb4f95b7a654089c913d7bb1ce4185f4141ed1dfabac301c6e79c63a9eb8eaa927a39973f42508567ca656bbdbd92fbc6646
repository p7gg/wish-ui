import { filterInstance, remove, removeItems } from '@solid-primitives/immutable';
import { createSubRoot } from '@solid-primitives/rootless';
import { asArray, access } from '@solid-primitives/utils';
import { createMemo, onCleanup, getOwner, createSignal, createComputed, on, children, untrack, onMount } from 'solid-js';

// src/index.ts
function mergeRefs(setRef, propsRef) {
  return (el) => {
    setRef(el);
    propsRef?.(el);
  };
}
var mutableRemove = (list, item) => {
  const index = list.indexOf(item);
  list.splice(index, 1);
};
function getChangedItems(prevList, list) {
  const prev = prevList.slice();
  const added = [];
  for (const el of list) {
    const index = prev.indexOf(el);
    if (index !== -1)
      prev.splice(index, 1);
    else
      added.push(el);
  }
  return [added, prev];
}
var getAddedItems = (prevList, list) => list.filter((item) => !prevList.includes(item));
var getRemovedItems = (prevList, list) => prevList.filter((item) => !list.includes(item));
function resolveElements(value) {
  let resolved = getResolvedElements(value);
  if (Array.isArray(resolved) && !resolved.length)
    resolved = null;
  return resolved;
}
function getResolvedElements(value) {
  if (typeof value === "function" && !value.length)
    return getResolvedElements(value());
  if (Array.isArray(value)) {
    const results = [];
    for (const item of value) {
      const result = getResolvedElements(item);
      if (result)
        Array.isArray(result) ? results.push.apply(results, result) : results.push(result);
    }
    return results;
  }
  return value instanceof HTMLElement ? value : null;
}
function elements(fn, ...types) {
  return createMemo(() => filterInstance(asArray(fn()), ...types.length ? types : [Element]));
}
function refs(fn, ...types) {
  const resolved = elements(fn, ...types);
  let prev = [];
  const memo = createMemo(() => {
    const list = resolved();
    const [added, removed] = getChangedItems(prev, list);
    prev = list;
    return { refs: list.slice(), added, removed };
  });
  return [() => memo().refs, () => memo().added, () => memo().removed];
}
var unmount = (el, handler) => {
  onCleanup(() => handler()(el));
};
function mapRemoved(list, mapFn) {
  let prevList = [];
  const saved = /* @__PURE__ */ new Set();
  const indexes = mapFn.length > 1 ? /* @__PURE__ */ new Map() : void 0;
  const owner = getOwner();
  const [items, setItems] = createSignal([]);
  createComputed(
    on(list, (_list) => {
      const { length } = prevList;
      const list2 = asArray(_list).slice();
      if (!length)
        return setItems(prevList = list2);
      for (let pi = 0, ni = 0; pi < length; ) {
        const item = prevList[pi];
        if (list2.includes(item))
          pi++, ni++;
        else if (saved.has(item)) {
          const x = prevList.indexOf(list2[ni]);
          if (x !== -1 && x <= pi)
            ni++;
          else {
            list2.splice(ni, 0, item);
            indexes?.get(item)?.(ni);
            pi++;
          }
        } else
          mapRemovedElement(list2, item, pi), pi++;
      }
      setItems(prevList = list2);
    })
  );
  let toRemove = [];
  const executeToRemove = () => {
    if (!toRemove.length)
      return;
    setItems((p) => removeItems(p, ...toRemove));
    toRemove = [];
  };
  function mapRemovedElement(list2, item, i) {
    createSubRoot((dispose) => {
      let signal, mapped;
      if (indexes) {
        const [index, setIndex] = createSignal(i);
        const s = mapFn(item, index);
        const m = access(s);
        if (!m)
          return dispose();
        indexes.set(m, setIndex);
        signal = s, mapped = m;
      } else {
        const s = mapFn(item);
        const m = access(s);
        if (!m)
          return dispose();
        signal = s, mapped = m;
      }
      saved.add(mapped);
      list2.splice(i, 0, mapped);
      let prev = mapped;
      createComputed(on(signal, (item2) => {
        saved.delete(prev);
        if (indexes) {
          const set = indexes.get(prev);
          indexes.delete(prev);
          if (item2)
            set && indexes.set(item2, set);
          else {
            const list3 = items();
            for (i = list3.indexOf(prev); i < list3.length; i++) {
              indexes.get(list3[i])?.((p) => --p);
            }
          }
        }
        if (!item2) {
          mutableRemove(prevList, prev);
          toRemove.push(prev);
          queueMicrotask(executeToRemove);
          return dispose();
        }
        saved.add(item2);
        setItems((p) => remove(p, prev, item2));
        prev = item2;
      }, { defer: true }));
    }, owner);
  }
  return items;
}
var Children = (props) => {
  const resolved = children(() => props.children);
  createComputed(on(resolved, props.get));
  onCleanup(() => props.get(void 0));
  return resolved;
};
var Refs = (props) => {
  const resolved = children(() => props.children);
  if (props.added || props.removed || props.onChange) {
    const [elements2, added, removed] = refs(resolved);
    const emit = (refs2, added2, removed2) => untrack(() => {
      props.refs?.(refs2);
      props.added?.(added2);
      props.removed?.(removed2);
      props.onChange?.({ refs: refs2, added: added2, removed: removed2 });
    });
    createComputed(() => emit(elements2(), added(), removed()));
    onCleanup(() => emit([], [], elements2()));
  } else if (props.refs) {
    const cb = props.refs;
    const refs2 = elements(resolved);
    createComputed(() => cb(refs2()));
    onCleanup(() => cb([]));
  }
  return resolved;
};
var Ref = (props) => {
  const resolved = children(() => props.children);
  let prev;
  createComputed(() => {
    const el = (() => {
      let el2 = access(resolved());
      if (!(el2 instanceof Element))
        el2 = void 0;
      return el2;
    })();
    untrack(() => {
      props.ref?.(el);
      if (el && prev !== el)
        onMount(() => props.onMount?.(el));
      if (prev && prev !== el && props.onUnmount)
        props.onUnmount(prev);
    });
    prev = el;
  });
  onCleanup(() => {
    if (prev) {
      props.ref?.(void 0);
      props.onUnmount?.(prev);
    }
  });
  return resolved;
};

export { Children, Ref, Refs, elements, getAddedItems, getChangedItems, getRemovedItems, mapRemoved, mergeRefs, refs, resolveElements, unmount };
