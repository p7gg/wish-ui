import { ComplexStyleRule } from '@vanilla-extract/css';

declare type RecipeStyleRule = ComplexStyleRule | string;
declare type VariantDefinitions = Record<string, RecipeStyleRule>;
declare type BooleanMap<T> = T extends 'true' | 'false' ? boolean : T;
declare type VariantGroups = Record<string, VariantDefinitions>;
declare type VariantSelection<Variants extends VariantGroups> = {
    [VariantGroup in keyof Variants]?: BooleanMap<keyof Variants[VariantGroup]>;
};
interface CompoundVariant<Variants extends VariantGroups> {
    variants: VariantSelection<Variants>;
    style: RecipeStyleRule;
}
declare type PatternOptions<Variants extends VariantGroups> = {
    base?: RecipeStyleRule;
    variants?: Variants;
    defaultVariants?: VariantSelection<Variants>;
    compoundVariants?: Array<CompoundVariant<Variants>>;
};
declare type RuntimeFn<Variants extends VariantGroups> = (options?: VariantSelection<Variants>) => string;
declare type RecipeVariants<RecipeFn extends RuntimeFn<VariantGroups>> = Parameters<RecipeFn>[0];

declare function recipe<Variants extends VariantGroups>(options: PatternOptions<Variants>, debugId?: string): RuntimeFn<Variants>;

export { RecipeVariants, RuntimeFn, recipe };
