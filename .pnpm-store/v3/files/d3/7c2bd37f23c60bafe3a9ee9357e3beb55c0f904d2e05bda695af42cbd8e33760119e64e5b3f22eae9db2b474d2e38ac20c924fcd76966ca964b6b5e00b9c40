import { onRootCleanup } from '@solid-primitives/utils';
import { createEffect } from 'solid-js';

// src/eventListener.ts
function makeEventListener(target, type, handler, options) {
  target.addEventListener(type, handler, options);
  return onRootCleanup(target.removeEventListener.bind(target, type, handler, options));
}
function createEventListener(targets, type, handler, options) {
  return;
}
function createEventSignal(target, type, options) {
  {
    return () => void 0;
  }
}
var eventListener = (target, props) => {
  createEffect(() => {
    const [type, handler, options] = props();
    makeEventListener(target, type, handler, options);
  });
};
function createEventListenerMap(targets, handlersMap, options) {
  {
    return;
  }
}
var WindowEventListener = (props) => {
  return null;
};
var DocumentEventListener = (props) => {
  return null;
};
function makeEventListenerStack(target, options) {
  {
    return [() => () => void 0, () => void 0];
  }
}

// src/callbackWrappers.ts
var preventDefault = (callback) => (e) => {
  e.preventDefault();
  callback(e);
};
var stopPropagation = (callback) => (e) => {
  e.stopPropagation();
  callback(e);
};
var stopImmediatePropagation = (callback) => (e) => {
  e.stopImmediatePropagation();
  callback(e);
};

export { DocumentEventListener, WindowEventListener, createEventListener, createEventListenerMap, createEventSignal, eventListener, makeEventListener, makeEventListenerStack, preventDefault, stopImmediatePropagation, stopPropagation };
