/*!
 * Portions of this file are based on code from ariakit.
 * MIT Licensed, Copyright (c) Diego Haz.
 *
 * Credits to the Ariakit team:
 * https://github.com/ariakit/ariakit/blob/232bc79018ec20967fec1e097a9474aba3bb5be7/packages/ariakit/src/popover/popover-state.ts
 */
import { createGenerateId, mergeDefaultProps } from "@kobalte/utils";
import { createSignal, createUniqueId, splitProps } from "solid-js";
import { PopperRoot } from "../popper";
import { createDisclosureState, createRegisterId } from "../primitives";
import { PopoverContext } from "./popover-context";
/**
 * A popover is a dialog positioned relative to an anchor element.
 */
export const PopoverRoot = props => {
    const defaultId = `popover-${createUniqueId()}`;
    props = mergeDefaultProps({
        id: defaultId,
        isModal: false,
    }, props);
    const [local, others] = splitProps(props, [
        "id",
        "isOpen",
        "defaultIsOpen",
        "onOpenChange",
        "isModal",
        "forceMount",
        "anchorRef",
    ]);
    const [defaultAnchorRef, setDefaultAnchorRef] = createSignal();
    const [triggerRef, setTriggerRef] = createSignal();
    const [contentRef, setContentRef] = createSignal();
    const [contentId, setContentId] = createSignal();
    const [titleId, setTitleId] = createSignal();
    const [descriptionId, setDescriptionId] = createSignal();
    const disclosureState = createDisclosureState({
        isOpen: () => local.isOpen,
        defaultIsOpen: () => local.defaultIsOpen,
        onOpenChange: isOpen => local.onOpenChange?.(isOpen),
    });
    const anchorRef = () => {
        return local.anchorRef?.() ?? defaultAnchorRef() ?? triggerRef();
    };
    const context = {
        isOpen: disclosureState.isOpen,
        isModal: () => local.isModal,
        shouldMount: () => local.forceMount || disclosureState.isOpen(),
        triggerRef,
        contentId,
        titleId,
        descriptionId,
        setDefaultAnchorRef,
        setTriggerRef,
        setContentRef,
        close: disclosureState.close,
        toggle: disclosureState.toggle,
        generateId: createGenerateId(() => local.id),
        registerContentId: createRegisterId(setContentId),
        registerTitleId: createRegisterId(setTitleId),
        registerDescriptionId: createRegisterId(setDescriptionId),
    };
    return (<PopoverContext.Provider value={context}>
      <PopperRoot anchorRef={anchorRef} contentRef={contentRef} {...others}/>
    </PopoverContext.Provider>);
};
