import { ComplexStyleRule } from '@vanilla-extract/css';

declare type RecipeStyleRule = ComplexStyleRule | string;
declare type VariantDefinitions = Record<string, RecipeStyleRule>;
declare type BooleanMap<T> = T extends 'true' | 'false' ? boolean : T;
declare type VariantGroups = Record<string, VariantDefinitions>;
declare type VariantSelection<Variants extends VariantGroups> = {
    [VariantGroup in keyof Variants]?: BooleanMap<keyof Variants[VariantGroup]>;
};
declare type PatternResult<Variants extends VariantGroups> = {
    defaultClassName: string;
    variantClassNames: {
        [P in keyof Variants]: {
            [P in keyof Variants[keyof Variants]]: string;
        };
    };
    defaultVariants: VariantSelection<Variants>;
    compoundVariants: Array<[VariantSelection<Variants>, string]>;
};
declare type RuntimeFn<Variants extends VariantGroups> = (options?: VariantSelection<Variants>) => string;

declare const createRuntimeFn: <Variants extends VariantGroups>(config: PatternResult<Variants>) => RuntimeFn<Variants>;

export { createRuntimeFn };
