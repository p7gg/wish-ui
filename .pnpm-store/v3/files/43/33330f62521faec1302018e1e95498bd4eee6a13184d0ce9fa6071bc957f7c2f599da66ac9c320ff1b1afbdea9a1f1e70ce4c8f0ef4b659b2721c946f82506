/*!
 * Portions of this file are based on code from react-spectrum.
 * Apache License Version 2.0, Copyright 2020 Adobe.
 *
 * Credits to the React Spectrum team:
 * https://github.com/adobe/react-spectrum/blob/3155e4db7eba07cf06525747ce0adb54c1e2a086/packages/@react-aria/checkbox/src/useCheckbox.ts
 */
import { OverrideProps, ValidationState } from "@kobalte/utils";
import { Accessor, Component, ComponentProps, JSX } from "solid-js";
interface CheckboxRootState {
    /** Whether the checkbox is checked or not. */
    isChecked: Accessor<boolean>;
    /** Whether the checkbox is in an indeterminate state. */
    isIndeterminate: Accessor<boolean>;
}
export interface CheckboxRootOptions {
    /** The controlled checked state of the checkbox. */
    isChecked?: boolean;
    /**
     * The default checked state when initially rendered.
     * Useful when you do not need to control the checked state.
     */
    defaultIsChecked?: boolean;
    /** Event handler called when the checked state of the checkbox changes. */
    onCheckedChange?: (isChecked: boolean) => void;
    /**
     * Whether the checkbox is in an indeterminate state.
     * Indeterminism is presentational only.
     * The indeterminate visual representation remains regardless of user interaction.
     */
    isIndeterminate?: boolean;
    /**
     * The name of the checkbox, used when submitting an HTML form.
     * See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).
     */
    name?: string;
    /**
     * The value of the checkbox, used when submitting an HTML form.
     * See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).
     */
    value?: string;
    /** Whether the checkbox should display its "valid" or "invalid" visual styling. */
    validationState?: ValidationState;
    /** Whether the user must check the checkbox before the owning form can be submitted. */
    isRequired?: boolean;
    /** Whether the checkbox is disabled. */
    isDisabled?: boolean;
    /** Whether the checkbox is read only. */
    isReadOnly?: boolean;
    /**
     * The children of the checkbox.
     * Can be a `JSX.Element` or a _render prop_ for having access to the internal state.
     */
    children?: JSX.Element | ((state: CheckboxRootState) => JSX.Element);
}
/**
 * A control that allows the user to toggle between checked and not checked.
 */
export declare const CheckboxRoot: Component<OverrideProps<ComponentProps<"label">, CheckboxRootOptions>>;
export {};
