/*!
 * Portions of this file are based on code from react-spectrum.
 * Apache License Version 2.0, Copyright 2020 Adobe.
 *
 * Credits to the React Spectrum team:
 * https://github.com/adobe/react-spectrum/blob/22cb32d329e66c60f55d4fc4025d1d44bb015d71/packages/@react-aria/listbox/src/useListBox.ts
 */
import { access, composeEventHandlers, createGenerateId, createPolymorphicComponent, mergeDefaultProps, mergeRefs, } from "@kobalte/utils";
import { createMemo, createUniqueId, splitProps } from "solid-js";
import { Dynamic } from "solid-js/web";
import { createListState, createSelectableList } from "../list";
import { createControllableArraySignal } from "../primitives";
import { createDomCollection } from "../primitives/create-dom-collection";
import { ListboxContext } from "./listbox-context";
/**
 * Listbox presents a list of options and allows a user to select one or more of them.
 */
export const ListboxRoot = createPolymorphicComponent(props => {
    let ref;
    const defaultId = `listbox-${createUniqueId()}`;
    props = mergeDefaultProps({
        as: "div",
        id: defaultId,
        selectionMode: "single",
    }, props);
    const [local, others] = splitProps(props, [
        "as",
        "ref",
        "value",
        "defaultValue",
        "onValueChange",
        "items",
        "onItemsChange",
        "state",
        "keyboardDelegate",
        "autoFocus",
        "selectionMode",
        "shouldFocusWrap",
        "shouldUseVirtualFocus",
        "shouldSelectOnPressUp",
        "shouldFocusOnHover",
        "allowDuplicateSelectionEvents",
        "disallowEmptySelection",
        "selectionBehavior",
        "selectOnFocus",
        "disallowTypeAhead",
        "allowsTabNavigation",
        "scrollRef",
        "onKeyDown",
        "onMouseDown",
        "onFocusIn",
        "onFocusOut",
    ]);
    const [items, setItems] = createControllableArraySignal({
        value: () => local.items,
        defaultValue: () => [],
        onChange: value => local.onItemsChange?.(value),
    });
    const { DomCollectionProvider } = createDomCollection({ items, onItemsChange: setItems });
    const listState = createMemo(() => {
        if (local.state) {
            return local.state;
        }
        return createListState({
            selectedKeys: () => local.value,
            defaultSelectedKeys: () => local.defaultValue,
            onSelectionChange: local.onValueChange,
            allowDuplicateSelectionEvents: () => access(local.allowDuplicateSelectionEvents),
            disallowEmptySelection: () => access(local.disallowEmptySelection),
            selectionBehavior: () => access(local.selectionBehavior),
            selectionMode: () => access(local.selectionMode),
            dataSource: items,
        });
    });
    const selectableList = createSelectableList({
        selectionManager: () => listState().selectionManager(),
        collection: () => listState().collection(),
        autoFocus: () => access(local.autoFocus),
        shouldFocusWrap: () => access(local.shouldFocusWrap),
        keyboardDelegate: () => local.keyboardDelegate,
        disallowEmptySelection: () => access(local.disallowEmptySelection),
        selectOnFocus: () => access(local.selectOnFocus),
        disallowTypeAhead: () => access(local.disallowTypeAhead),
        shouldUseVirtualFocus: () => access(local.shouldUseVirtualFocus),
        allowsTabNavigation: () => access(local.allowsTabNavigation),
        isVirtualized: false,
    }, () => ref, () => local.scrollRef?.());
    const context = {
        listState,
        generateId: createGenerateId(() => others.id),
        shouldUseVirtualFocus: () => props.shouldUseVirtualFocus,
        shouldSelectOnPressUp: () => props.shouldSelectOnPressUp,
        shouldFocusOnHover: () => props.shouldFocusOnHover,
    };
    return (<DomCollectionProvider>
      <ListboxContext.Provider value={context}>
        <Dynamic component={local.as} ref={mergeRefs(el => (ref = el), local.ref)} role="listbox" tabIndex={selectableList.tabIndex()} aria-multiselectable={listState().selectionManager().selectionMode() === "multiple" ? true : undefined} data-focus={listState().selectionManager().isFocused() ? "" : undefined} onKeyDown={composeEventHandlers([local.onKeyDown, selectableList.handlers.onKeyDown])} onMouseDown={composeEventHandlers([
            local.onMouseDown,
            selectableList.handlers.onMouseDown,
        ])} onFocusIn={composeEventHandlers([local.onFocusIn, selectableList.handlers.onFocusIn])} onFocusOut={composeEventHandlers([local.onFocusOut, selectableList.handlers.onFocusOut])} {...others}/>
      </ListboxContext.Provider>
    </DomCollectionProvider>);
});
