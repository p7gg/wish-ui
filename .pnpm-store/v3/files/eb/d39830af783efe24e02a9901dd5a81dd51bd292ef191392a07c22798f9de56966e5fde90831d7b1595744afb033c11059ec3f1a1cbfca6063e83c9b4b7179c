/*!
 * Portions of this file are based on code from react-spectrum.
 * Apache License Version 2.0, Copyright 2020 Adobe.
 *
 * Credits to the React Spectrum team:
 * https://github.com/adobe/react-spectrum/blob/15e101b74966bd5eb719c6529ce71ce57eaed430/packages/@react-stately/calendar/src/useCalendarState.ts
 */
import { Calendar, CalendarDate } from "@internationalized/date";
import { MaybeAccessor, ValidationState } from "@kobalte/utils";
import { CalendarState, DateValue, MappedDateValue } from "./types";
export interface CreateCalendarStateProps {
    /** The controlled selected date of the calendar. */
    value?: MaybeAccessor<DateValue | undefined>;
    /**
     * The selected date of the calendar when initially rendered.
     * Useful when you do not need to control the selected date.
     */
    defaultValue?: MaybeAccessor<DateValue | undefined>;
    /** Event handler called when the selected date changes. */
    onValueChange?: (selectedDate: MappedDateValue<DateValue>) => void;
    /** The locale to display and edit the value according to. */
    locale?: MaybeAccessor<string | undefined>;
    /**
     * A function that creates a [Calendar](https://react-spectrum.adobe.com/internationalized/date/Calendar.html)
     * object for a given calendar identifier. Such a function may be imported from the
     * `@internationalized/date` package, or manually implemented to include support for
     * only certain calendars.
     */
    createCalendar?: (name: string) => Calendar;
    /**
     * The number of months that will be displayed at once.
     * This affects how pagination works.
     */
    visibleMonths?: MaybeAccessor<number | undefined>;
    /** Determines how to align the initial selection relative to the visible date range. */
    selectionAlignment?: MaybeAccessor<"start" | "center" | "end" | undefined>;
    /** The minimum allowed date that a user may select. */
    minValue?: MaybeAccessor<DateValue | undefined>;
    /** The maximum allowed date that a user may select. */
    maxValue?: MaybeAccessor<DateValue | undefined>;
    /** Callback that is called for each date of the calendar. If it returns true, then the date is unavailable. */
    isDateUnavailable?: (date: DateValue) => boolean;
    /** Whether the calendar is disabled. */
    isDisabled?: MaybeAccessor<boolean | undefined>;
    /** Whether the calendar value is immutable. */
    isReadOnly?: MaybeAccessor<boolean | undefined>;
    /** Whether to automatically focus the calendar when it mounts. */
    autoFocus?: MaybeAccessor<boolean | undefined>;
    /** Controls the currently focused date within the calendar. */
    focusedValue?: MaybeAccessor<DateValue | undefined>;
    /** The date that is focused when the calendar first mounts (uncountrolled). */
    defaultFocusedValue?: MaybeAccessor<DateValue | undefined>;
    /** Handler that is called when the focused date changes. */
    onFocusChange?: (date: CalendarDate) => void;
    /** Whether the current selection is valid or invalid according to application logic. */
    validationState?: MaybeAccessor<ValidationState | undefined>;
}
/**
 * Provides state management for a calendar component.
 * A calendar displays one or more date grids and allows users to select a single date.
 */
export declare function createCalendarState(props: CreateCalendarStateProps): CalendarState;
